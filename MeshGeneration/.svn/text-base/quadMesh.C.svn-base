// Set up a mesh with each quadralateral "affine" equivalent to the unit square

#include<string>
#include<sstream>
#include<fstream>

#include"../LinearAlgebra/svector.C"
#include"gelement.C"
#include"../FiniteElement/basisFns.C"

#define QUADMESH_NCHI  4
#define QUADMESH_NCHIB 2

typedef GeometricElement<2, 4> gelement;
typedef BoundaryGelement<2, 2> bgelement;

class quadMesh
{
public:
  quadMesh(int);
  quadMesh(int, int);
  quadMesh(int, int*);
  quadMesh(int, int, int*);

  quadMesh(std::string ss);

  int nNode()  const {return nodes;}
  int nElem()  const {return nelem;}
  int nBelem() const {return nbelem;}
  
  void locate(const svector<2>&, gelement&, svector<2>&) const;

  void info();
  void print();
  void print(std::ostream&);

  class geiterator 
  {
  public:
    geiterator();
    geiterator(int l, quadMesh * g);
    void operator++();
    void operator++(int);
    geiterator& operator=(const geiterator & it);
    bool operator==(const geiterator & it);
    bool operator!=(const geiterator & it);
    gelement operator*();  
  private:
    int loc;
    quadMesh * gm;
  };
  
  geiterator gebegin();
  geiterator geend();
  
  class bgeiterator 
  {
  public:
    bgeiterator();
    bgeiterator(int l, quadMesh * g);
    void operator++();
    void operator++(int);
    bgeiterator& operator=(const bgeiterator & it);
    bool operator==(const bgeiterator & it);
    bool operator!=(const bgeiterator & it);
    bgelement operator*();
  private:
    int loc;
    quadMesh * gm;
  };
  
  bgeiterator bgebegin();
  bgeiterator bgeend();

  LagrangeBasisFunction<2> *gBasis;

  gelement  intToGe(int) const;
  bgelement intToBge(int) const;

private:
  int nelem;
  int nodes;
  int nbelem;
  
  int nex, ney;
  double xmin, xmax, ymin, ymax;
  int bcType[4];
};

quadMesh::quadMesh(std::string ss) : gBasis(Square4)
{
  int nx;

  if(!ss.empty())
    {
      std::stringstream ist(ss);
     
     if( !(ist >> nx) )
       {
	 std::cerr << "quadMesh(string): Invalid integer: " << ss
		   << ", terminating" << std::endl;
	 throw("Invalid input");
       }
     
     if(nx <= 0) 
       {
	 std::cerr << "quadMesh(string): Invalid integer: " 
		   << nx << ", terminating" << std::endl;
	 throw("Invalid input argument");
       }
    }
 else
   {
     nx = 8;
   }

  nelem = nx*nx; 
  nodes = ((nx+1)*(nx+1));
  nbelem= (4*nx);

  nex = (nx);
  ney = (nx); 

  xmin = (-1); xmax = (1); 
  ymin = (-1); ymax = (1);

  for(int i = 0; i < 4; i++) bcType[i] = 0;

  bcType[2] = 1;   // Test Neumann BC

//  bcType[1] = 1;   // Test Neumann BC
//  std::cout << "quadMesh(): BC on RHS for wave equation test" << std::endl;

//   bcType[0] = bcType[2] = 1;   // Test Neumann BC
//   std::cout 
//	<< "quadMesh(): Neumann BC on Bottom and Top for wave equation test" 
//      	<< std::endl;

  // Mesh and BC for Examples in Chapters 8 and 9 of FEbook
  // using Example No. 1.

  std::cout 
    << "quadMesh(): Mesh and BC for Examples in Chapters 8 and 9 of FEbook" 
    << std::endl;

  xmin = (0); xmax = (1); 
  ymin = (0); ymax = (1);
  bcType[0] = bcType[3] = 0;     // Dircihlet on bottom, left
  bcType[1] = bcType[2] = 1;     // Neumann on top, right

  info();
}

quadMesh::quadMesh(int nx)
  : gBasis(Square4),
    nelem(nx*nx), nodes((nx+1)*(nx+1)),
    nbelem(4*nx), nex(nx), ney(nx), 
    xmin(-1), xmax(1), ymin(-1), ymax(1)
{
  for(int i = 0; i < 4; i++) bcType[i] = 0;

  bcType[3] = 1;   // Test Neumann BC

  info();
}

quadMesh::quadMesh(int nx, int bct[4]) 
  : gBasis(Square4),
    nelem(nx*nx), nodes((nx+1)*(nx+1)),
    nbelem(4*nx), nex(nx), ney(nx), 
    xmin(-1), xmax(1), ymin(-1), ymax(1)
{
  for(int i = 0; i < 4; i++) bcType[i] = bct[i];

  info();
}

quadMesh::quadMesh(int nx, int ny) 
  : gBasis(Square4),
    nelem(nx*ny), nodes((nx+1)*(ny+1)),
    nbelem(2*(nx+ny)), nex(nx), ney(ny),
    xmin(-1), xmax(1), ymin(-1), ymax(1)
{
  for(int i = 0; i < 4; i++) bcType[i] = 0;

  bcType[3] = 1;   // Test Neumann BC

  info();
}

quadMesh::quadMesh(int nx, int ny, int bct[4]) 
  : gBasis(Square4),
    nelem(nx*ny), nodes((nx+1)*(ny+1)),
    nbelem(2*(nx+ny)), nex(nx), ney(ny),
    xmin(-1), xmax(1), ymin(-1), ymax(1)
{
  for(int i = 0; i < 4; i++) bcType[i] = bct[i];

  info();
}

void quadMesh::info()
{
  std::cout << "quadMesh::info(): quadrilateral mesh" << std::endl;
  std::cout << "Boundary codes bcType[botom,rhs,top,lhs] = ["
	    << bcType[0] << "," << bcType[1] << ","
	    << bcType[2] << "," << bcType[3] << "]" 
	    << std::endl;
  std::cout << "Number of elements in each x-direction = ......... " << nex 
	    << std::endl;
  std::cout << "Number of elements in each y-direction = ......... " << ney 
	    << std::endl;
  std::cout << "[xmin,xmax] = ............................... [" 
	    << xmin << "," << xmax << "]" << std::endl;
  std::cout << "[ymin,ymax] = ............................... [" 
	    << ymin << "," << ymax << "]" << std::endl;

  return;
}

void quadMesh::locate(const svector<2>& xx, gelement& ee, svector<2>& xi) const
{
  int ie, je;

  if((xx[0] < xmin) || (xx[0] > xmax) || (xx[1] < ymin) || (xx[1] > ymax))
    {
      //  std::cerr << "Point out of range: (" << xx[0] << "," << xx[1]
      //   << ") not in [0,1]^2" << std::endl;

      throw("Point out of range");
    }

  double dx = (xx[0]-xmin) / (xmax-xmin);
  double dy = (xx[1]-ymin) / (ymax-ymin);

  ie = (int) (dx * (nex - 1.0e-14));  // if xx[0] = xmax evaluates to nex-1
  je = (int) (dy * (ney - 1.0e-14));  // if xx[1] = ymax evaluates to ney-1

  xi = svector<2>(2.0*(xx[0]*nex-ie) - 1.0, 2.0*(xx[1]*ney-je) - 1.0);

  ee = intToGe(je*nex+ie);

  return;
}

quadMesh::geiterator::geiterator() {
    loc = 0;
    gm = NULL;
}

quadMesh::geiterator::geiterator(int l, quadMesh * g) {
    loc = l;
    gm = g;
}

void quadMesh::geiterator::operator++() {
    (*this)++;
}

void quadMesh::geiterator::operator++(int) {
    loc++;
}

quadMesh::geiterator& quadMesh::geiterator::operator=(const geiterator & it) {
    loc = it.loc;
    gm = it.gm;
    return *this;
}

bool quadMesh::geiterator::operator==(const geiterator & it) {
    if (gm != it.gm || loc != it.loc) {
	return false;
    }
    return true;
}

bool quadMesh::geiterator::operator!=(const geiterator & it) {
    return !(*this == it);
}

gelement quadMesh::geiterator::operator*() {

  gelement ee = gm->intToGe(loc);
    
  return ee;
}


quadMesh::geiterator quadMesh::gebegin() {
    return geiterator(0, this);
}

quadMesh::geiterator quadMesh::geend() {
    return geiterator(nelem, this);
}

quadMesh::bgeiterator::bgeiterator() {
    loc = 0;
    gm = NULL;
}

quadMesh::bgeiterator::bgeiterator(int l, quadMesh * g) {
    loc = l;
    gm = g;
}

void quadMesh::bgeiterator::operator++() {
    (*this)++;
}

void quadMesh::bgeiterator::operator++(int) {
    loc++;
}

quadMesh::bgeiterator& quadMesh::bgeiterator::operator=(const bgeiterator & it) {
    loc = it.loc;
    gm = it.gm;
    return *this;
}

bool quadMesh::bgeiterator::operator==(const bgeiterator & it) {
    if (loc != it.loc || gm != it.gm) {
	return false;
    }
    return true;
}

bool quadMesh::bgeiterator::operator!=(const bgeiterator & it) {
    return !(*this == it);
}

bgelement quadMesh::bgeiterator::operator*() {

  bgelement be = gm->intToBge(loc);

  return be;

}

quadMesh::bgeiterator quadMesh::bgebegin() {
    return bgeiterator(0,this);
}

quadMesh::bgeiterator quadMesh::bgeend() {
    return bgeiterator(nbelem,this);
}

gelement quadMesh::intToGe(int n) const
{
int ie, je;
double hx,hy, x0, y0;
gelement ee;

//*********** Set up for Quad 4 Elements **************
//*********** Set up for Quad 4 Elements **************
//*********** Set up for Quad 4 Elements **************

 if((n < 0) || (n >= nelem))
   {
     std::cerr << "Element number " << n << " out of range, nelem = " 
	       << nelem << std::endl;

     throw("Element number out of range");
   }

 je = n / nex;
 ie = n - je * nex;

 ee.nodes[0] = (nex+1) * je + ie;
 ee.nodes[1] = ee.nodes[0] + 1;
 ee.nodes[3] = ee.nodes[0] + (nex+1);
 ee.nodes[2] = ee.nodes[3] + 1;
 
 hx = (xmax-xmin) / nex;
 hy = (ymax-ymin) / ney;

 x0 = xmin + ie * hx;
 y0 = ymin + je * hy;

 ee.xx[0] = svector<2>(x0,    y0);
 ee.xx[1] = svector<2>(x0+hx, y0);
 ee.xx[2] = svector<2>(x0+hx, y0+hy);
 ee.xx[3] = svector<2>(x0,    y0+hy);

 ee.master = gBasis->master;
 ee.basis  = gBasis->basis;

 return(ee);
}

bgelement quadMesh::intToBge(int n) const
{
double hx,hy;
bgelement ee;

//*********** Set up for Quad 4 Elements **************
//*********** Set up for Quad 4 Elements **************
//*********** Set up for Quad 4 Elements **************

 if((n < 0) || (n >= nbelem))
   {
     std::cerr << "Boundary element number " << n << " out of range, nelem = " 
	       << nelem << std::endl;

     throw("Boundary element number out of range");
   }

 hx = (xmax-xmin) / nex;
 hy = (ymax-ymin) / ney;

// bcType[4] sets the boundary code
//
// Bottom boundary: type = bcType[0] 
// Right hand side: type = bcType[1]
// Top boundary:    type = bcType[2]
// Left hand side:  type = bcType[3]

 if(n < nex)  // bottom
  {
    ee.type = bcType[0];

    ee.nodes[0] = n;
    ee.nodes[1] = ee.nodes[0] + 1;

    ee.xx[0] = svector<2>(xmin + n * hx, ymin);
    ee.xx[1] = ee.xx[0] + svector<2>(hx  , 0.0);
  }
 else if(n < nex+ney) // rhs
   {
    ee.type = bcType[1];

    ee.nodes[0] = ((n-nex)+1) * (nex+1) - 1;
    ee.nodes[1] = ee.nodes[0] + (nex+1);

    ee.xx[0] = svector<2>(xmax, xmin + (n-nex)*hy);
    ee.xx[1] = ee.xx[0] + svector<2>(0.0, hy);
  }
 else if(n < 2*nex+ney)  // top
  {
    ee.type = bcType[2];

    ee.nodes[1] = (nex+1)*ney + (n-nex-ney);
    ee.nodes[0] = ee.nodes[1] + 1;

    ee.xx[1] = svector<2>(xmin + (n-nex-ney) * hx, ymax);
    ee.xx[0] = ee.xx[1] + svector<2>(hx  , 0.0);
  }
 else if(n < 2*nex + 2*ney) // lhs
   {
    ee.type = bcType[3];

    ee.nodes[1] = (n-2*nex-ney) * (nex+1);
    ee.nodes[0] = ee.nodes[1] +   (nex+1);

    ee.xx[1] = svector<2>(xmin, ymin + (n-2*nex-ney)*hy);
    ee.xx[0] = ee.xx[1] + svector<2>(0.0, hy);
  }
 else
   {
     std::cerr 
       << "Boundary element number " << n << " out of range, nbelem = " 
       << nbelem << std::endl;

     throw("Boundary element number out of range");
   }

 if( (bcType[0] == 0) && (bcType[1] == 0) &&
     (bcType[2] == 0) && (bcType[3] == 0) && (n==0) ) ee.type += 10;

 ee.master = gBasis->boundary->master;
 ee.basis  = gBasis->boundary->basis;

 return(ee);
}

void quadMesh::print()
{
  int i;

  gelement ge;
  bgelement be;

  std::ofstream dump("output");

  dump.setf(std::ios::fixed, std::ios::floatfield);

  dump << "Number of elements = " << nelem << std::endl;
  dump << "Number of nodes    = " << nodes << std::endl;

  for(i = 0; i < nelem; i++)
    {
      dump << "Element " << i << std::endl;

      ge = intToGe(i);

      // ge.print(dump);
    }

  dump << std::endl << "Number of boundary elements = " << nbelem << std::endl;

  for(i = 0; i < nbelem; i++)
    {
      dump << "Boundary Element " << i << ",";

      be = intToBge(i);

      // be.print(dump);
    }

  dump.close();
}
