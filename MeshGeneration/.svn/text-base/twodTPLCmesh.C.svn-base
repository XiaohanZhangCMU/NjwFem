// Set up a mesh with each simplex affine equivalent to the unit triangle

#include<string>
#include<fstream>
#include<map>
#include<vector>
#include"intArray.h"

#include"../LinearAlgebra/svector.C"
#include"gelement.C"
#include"../FiniteElement/basisFns.C"

typedef GeometricElement<2, 3> gelement;
typedef BoundaryGelement<2, 2> bgelement;

class twodTPLCmesh
{
public:
  twodTPLCmesh(std::string);                        // read mesh.poly file

  twodTPLCmesh(const twodTPLCmesh &mm) 
  {
    std::cerr << "twodTPLCmesh(): Don't copy me, deep copy nyi\n";
    throw("don't copy a twodTPLCmesh");
  }

  twodTPLCmesh() 
  {
    std::cerr << "twodTPLCmesh(): Default constructor called, nyi\n";
    throw("bad twodTPLCmesh constructor");
  }
  
  ~twodTPLCmesh() { return; }
  
  int nNode()  const {return nodes;}
  int nElem()  const {return nelem;}
  int nBelem() const {return nbelem;}
  
  void print(std::ostream& dump);
  
  class geiterator : public std::vector<intArray<3> >::iterator
  {
  public:
    geiterator(const std::vector<intArray<3> >::iterator &it, twodTPLCmesh *g) 
      : std::vector<intArray<3> >::iterator(it), gm(g) {}

    gelement operator*();
    
  private:
    twodTPLCmesh * gm;
  };

  geiterator gebegin();
  geiterator geend();

  class bgeiterator : public std::vector<intArray<3> >::iterator
  {
  public:
    bgeiterator(const std::vector<intArray<3> >::iterator &it, twodTPLCmesh *g) 
      : std::vector<intArray<3> >::iterator(it), gm(g) {}

    bgelement operator*();
    
  private:
    twodTPLCmesh *gm;
  };

  bgeiterator bgebegin();
  bgeiterator bgeend();

  LagrangeBasisFunction<2> *gBasis;

private:
  int nelem;
  int nodes;
  int nbelem;
  
  std::map<int, svector<2> > vertices;    // vertices[id] = vertex coordinates

  std::vector<intArray<3> > segments;     // boundary segmments + id

  std::vector<intArray<3> > triangles;    // triangles

  void input(std::string meshFile); // auxillary function to read .tplc file
};

twodTPLCmesh::twodTPLCmesh(std::string meshFile) : gBasis(Triangle3)
{
  std::cout << "Initializing twodTPLCmesh(" << meshFile << "):" 
	    << std::endl;
  
  input(meshFile);
  
  std::cout << "Number of vertices read in = ..................... " << nodes
	    << std::endl;
  std::cout << "Number of boundary segments = .................... " << nbelem 
	    << std::endl;
  std::cout << "Number of triangles = ............................ " << nelem 
	    << std::endl;
  
  return;
}

gelement twodTPLCmesh::geiterator::operator*() 
{
  gelement ee;
  int j, *tt = std::vector<intArray<3> >::iterator::operator*();
  
  ee.type = 0;

  for(j = 0; j < 3; j++) 
    {
      ee.xx[j] = gm->vertices[tt[j]];
      ee.nodes[j] = tt[j];
    }

  ee.master = gm->gBasis->master;
  ee.basis  = gm->gBasis->basis;

  return ee;
}

twodTPLCmesh::geiterator twodTPLCmesh::gebegin() 
{
  return geiterator(triangles.begin(), this);
}

twodTPLCmesh::geiterator twodTPLCmesh::geend() 
{
  return geiterator(triangles.end(), this);
}

bgelement twodTPLCmesh::bgeiterator::operator*() 
{
  int j, *tt = std::vector<intArray<3> >::iterator::operator*();
  bgelement be;

  be.type = tt[2];

  for(j = 0; j < 2; j++) 
  {
      be.xx[j] = gm->vertices[tt[j]];
      
      be.nodes[j] = tt[j];
  }  

  be.master = gm->gBasis->boundary->master;
  be.basis  = gm->gBasis->boundary->basis;

  return be;
}

twodTPLCmesh::bgeiterator twodTPLCmesh::bgebegin() 
{
  return bgeiterator(segments.begin(),this);
}

twodTPLCmesh::bgeiterator twodTPLCmesh::bgeend() 
{
  return bgeiterator(segments.end(),this);
}

void twodTPLCmesh::input(std::string meshFile)
{
  int i, j, dim, id, i0,i1, i2, nSegment, np;
  double xx, yy;

  std::ifstream in((meshFile).c_str());

  if( !in.is_open() ) in.open((meshFile + ".tplc").c_str());

  if( !in.is_open() ) 
    {
      std::cerr << "twodTPLCmesh::input(): can't open .tplc file:" 
		<< meshFile << std::endl;

      throw("Can't open file");
    }

  in.ignore(256,'\n');    // first line is TPLC
  in.ignore(256,' ');     // Second line is DIMENSION dim
  in >> dim;
  assert(dim == 2);

  in.ignore(256,'\n');  
  in.ignore(256,' ');    // Next line is POINTS nodes
  in >> nodes;
  assert(nodes > 0);

  for(i = 0; i < nodes; i++)
    {
      in.ignore(256,'\n');

      in >> id;

      in >> xx >> yy;

      vertices[id] = svector<2>(xx,yy);
    }

  // Read and discard segments

  in.ignore(256,'\n');
  in.ignore(256,' ');       // next line is SEGMENTS nSegment
  in >> nSegment;
  assert(nSegment >= 0);

  nbelem = 0;

  for(i = 0; i < nSegment; i++)
    {
    in >> id >> np; assert(np > 1);

    in >> i0;  assert(vertices.find(i0) != vertices.end());

    segments.resize(nbelem + np-1);

    for(j = 0; j < np-1; j++)
      {
      in >> i1;   assert(vertices.find(i1) != vertices.end());

      segments[nbelem][0] = i0; 
      segments[nbelem][1] = i1; 

      segments[nbelem++][2] = id; 

      i0 = i1;
      }
    }

  // Read the tetrahedra

  in.ignore(256,'\n');
  in.ignore(256,' ');       // next line is TRIANGLES nTri
  in >> nelem;
  assert(nelem >= 0);

  triangles.resize(nelem);

  for(i = 0; i < nelem; i++)
    {
    in.ignore(256,'\n');

    in >> i0 >> i1 >> i2;

    assert(vertices.find(i0) != vertices.end());
    assert(vertices.find(i1) != vertices.end());
    assert(vertices.find(i2) != vertices.end());

    triangles[i][0] = i0; 
    triangles[i][1] = i1; 
    triangles[i][2] = i2; 
    }

  in.close();

  return;
}
