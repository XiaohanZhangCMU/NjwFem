// construct the baracentric refinement of a mesh in a .tplc file

#include"refineTPLC.h"

void input(string meshFile);  // auxillary function to read  .tplc file
void output(string meshFile); // auxillary function to write .tplc file

int ndim;
int ntet, ntetR;
int nodes, nodesR;
int nSegment, nFace;
  
map<int, svector<3> > vertices;   // vertices[id] = vertex coordinates

vector<int> segmentId;
vector<int> segmentNpts;
vector<vector<int> > segmentPts;

vector<int> faceId;
vector<int> faceNtri;
vector<vector<intArray<3> > > facePts;

vector<intArray<4> > tets;        // tetrahedra/triangles (3d/2d)
vector<intArray<4> > tetsR;       // refined tetrahedra/triangles (3d/2d)

map<vertexKey, int>  oldId;       // renumber to keep bandwith small

vector<int> newToOld, oldToNew;

int main(int argc, char *argv[])
{
  assert(argc > 1);

  string meshFile = argv[1];

  cout << "Reading file: " << meshFile << endl;
  
  input(meshFile);
  
  cout << "Number dimensions = .............................. " << ndim
	    << endl;
  cout << "Number of vertices read in = ..................... " << nodes
	    << endl;
  cout << "Number of segments read in = ..................... " << nSegment
	    << endl;

  int idx = 0;

  if(ndim == 3)
    {
    cout << "Number of faces = ................................ " << nFace 
	 << endl;
    cout << "Number of tetrahedra = ........................... " << ntet 
	 << endl;
    
    ntetR = 4 * ntet;
    nodesR = nodes + ntet;
    
    tetsR.resize(ntetR);
  
    // sub-tets are: [c,1,2,3], [c,0,3,2], [c,0,1,3], [c,0,2,1]
    
    int subs[4][3] = {{1,2,3}, {0,3,2}, {0,1,3}, {0,2,1}};
    
    for(vector<intArray<4> >::iterator tetit = tets.begin();
	tetit != tets.end(); tetit++)
      {
      intArray<4> tt = *tetit;
	
      svector<3> cc = 0.25 * (vertices[tt[0]] + vertices[tt[1]] +
			      vertices[tt[2]] + vertices[tt[3]]);

      vertices[nodes + idx] = cc;   // add the circimcenter to the node list
      
      for(int i = 0; i < 4; i++)
	{
	tetsR[4*idx + i][0] = nodes + idx;
	tetsR[4*idx + i][1] = tt[subs[i][0]];
	tetsR[4*idx + i][2] = tt[subs[i][1]];
	tetsR[4*idx + i][3] = tt[subs[i][2]];
	}
      
      oldId[vertexKey(tt[0],tt[1],tt[2],tt[3])] = nodes + idx;

      idx ++;
      }
    }
  else if(ndim == 2)
    {
    cout << "Number of trignales = ............................ " << ntet 
	 << endl;

    ntetR = 3 * ntet;
    nodesR = nodes + ntet;
    
    tetsR.resize(ntetR);
  
    // sub-triangles are: [c,1,2], [c,2,0], [c,0,1]
    
    int subs[3][2] = {{1,2}, {2,0}, {0,1}};
    
    for(vector<intArray<4> >::iterator tetit = tets.begin();
	tetit != tets.end(); tetit++)
      {
      intArray<4> tt = *tetit;
	
      svector<3> cc = (1.0/3.0) * 
	(vertices[tt[0]] + vertices[tt[1]] + vertices[tt[2]]);

      vertices[nodes + idx] = cc;   // add the circimcenter to the node list
      
      for(int i = 0; i < 3; i++)
	{
	tetsR[3*idx + i][0] = nodes + idx;
	tetsR[3*idx + i][1] = tt[subs[i][0]];
	tetsR[3*idx + i][2] = tt[subs[i][1]];
	}
      
      oldId[vertexKey(tt[0],tt[1],tt[2],tt[2])] = nodes + idx;

      idx ++;
      }
    }

  // compute new node numbering

  newToOld.resize(nodesR);
  oldToNew.resize(nodesR);

  assert(idx == ntet);

  idx = 0;

  for(map<vertexKey, int>::iterator idit = oldId.begin();
      idit != oldId.end(); idit++)
    {
      oldToNew[idit->second] = idx;
      newToOld[idx] = idit->second;

      idx++;
    }

  assert(idx == nodesR);

  output(meshFile + "R");

  cout << "Number of vertices output = ...................... " << nodesR
	    << endl;
  cout << "Number of elements output = ...................... " << ntetR
	    << endl;

  return(0);
}

void input(string meshFile)
{
  int i, j, id, i0,i1, i2, i3 = 0, np, ntri;
  double xx, yy, zz = 0.0;

  ifstream in((meshFile + ".tplc").c_str());

  if( !in.is_open() ) 
    {
      cerr << "dir3Mesh::input(): can't open .tplc file:" 
		<< meshFile << endl;

      throw("Can't open file");
    }

  in.ignore(256,'\n');    // first line is TPLC
  in.ignore(256,' ');     // Second line is DIMENSION dim
  in >> ndim;
  assert((ndim == 3) || (ndim == 2));

  in.ignore(256,'\n');  
  in.ignore(256,' ');    // Next line is POINTS nodes
  in >> nodes;
  assert(nodes > 0);

  for(i = 0; i < nodes; i++)
    {
      in.ignore(256,'\n');

      in >> id;

      in >> xx >> yy;

      if(ndim == 3) in >> zz;

      vertices[id] = svector<3>(xx,yy,zz);

      oldId[vertexKey(id,id,id,id)] = id;
    }

  // Read segments

  in.ignore(256,'\n');
  in.ignore(256,' ');       // next line is SEGMENTS nSegment
  in >> nSegment;
  assert(nSegment >= 0);
  
  segmentId.resize(nSegment);
  segmentNpts.resize(nSegment);
  segmentPts.resize(nSegment);

  for(i = 0; i < nSegment; i++)
    {
    in.ignore(256,'\n');
   
    in >> id >> np;

    segmentId[i] = id;
    segmentNpts[i] = np;

    segmentPts[i].resize(np);

    for(j = 0; j < np; j++) {in >> i0; segmentPts[i][j] = i0;}
    }

  // Read the triangulated faces (3d)

  if(ndim == 3)
    {
    in.ignore(256,'\n');
    in.ignore(256,' ');       // next line is FACES nFace
    in >> nFace;
    assert(nFace >= 0);
    
    faceId.resize(nFace);
    faceNtri.resize(nFace);
    facePts.resize(nFace);
    
    for(i = 0; i < nFace; i++)
      {
      in.ignore(256,'\n');

      in >> id >> ntri;

      assert(ntri >= 0);
      
      faceId[i] = id;
      faceNtri[i] = ntri;
      facePts[i].resize(ntri);
      for(j = 0; j < ntri; j++)
	{
        in.ignore(256,'\n');

	in >> i0 >> i1 >> i2;

	assert(vertices.find(i0) != vertices.end());
	assert(vertices.find(i1) != vertices.end());
	assert(vertices.find(i2) != vertices.end());
	
	facePts[i][j][0] = i0; 
	facePts[i][j][1] = i1; 
	facePts[i][j][2] = i2; 
	}
      }
    }

  // Read the tetrahedra/triangles (2d/3d)

  in.ignore(256,'\n');
  in.ignore(256,' ');       // next line is TETS nTet
  in >> ntet;               // or TRIANGLES nTri
  assert(ntet >= 0);

  tets.resize(ntet);

  for(i = 0; i < ntet; i++)
    {
    in.ignore(256,'\n');

    in >> i0 >> i1 >> i2; 


    assert(vertices.find(i0) != vertices.end());
    assert(vertices.find(i1) != vertices.end());
    assert(vertices.find(i2) != vertices.end());

    if(ndim == 3)
      {
      in >> i3;

      assert(vertices.find(i3) != vertices.end());
      }

    tets[i][0] = i0; 
    tets[i][1] = i1; 
    tets[i][2] = i2; 
    tets[i][3] = i3; 
    }

  in.close();

  return;
}

void output(string meshFile)
{
  int i,j;

  ofstream out((meshFile + ".tplc").c_str());

  if( !out.is_open() ) 
    {
      cerr << "dir3Mesh::input(): can't open .tplc file:" 
		<< meshFile << endl;

      throw("Can't open file");
    }

  out << "TPLC" << endl 
      << "DIMENSION " << ndim << endl 
      << "POINTS " << nodesR << endl;
   
  out.setf(ios::scientific,ios::floatfield);
  out.precision(16);

  for(i = 0; i < nodesR; i++)   // output vertices
    {
      int oldId = newToOld[i];

      out << i 
	  << " " << vertices[oldId][0]
	  << " " << vertices[oldId][1];

      if(ndim == 3) out << " " << vertices[oldId][2];

      out << endl;
    }

  out << "SEGMENTS " << nSegment << endl;   // next line is SEGMENTS nSegment

  for(i = 0; i < nSegment; i++)
    {
      out << segmentId[i] << " " << segmentNpts[i] << " ";   

      for(j = 0; j < segmentNpts[i]; j++) 
	out << oldToNew[ segmentPts[i][j] ] << " ";

      out << endl;
    }


  if(ndim == 3)
    {
    out << "FACES " << nFace << endl;    // next line is FACES nFace

    for(i = 0; i < nFace; i++)
      {
      out << faceId[i] << " " << faceNtri[i] << endl;

      for(j = 0; j < faceNtri[i]; j++)
	{
        out << oldToNew[ facePts[i][j][0] ] << " "
	    << oldToNew[ facePts[i][j][1] ] << " " 
	    << oldToNew[ facePts[i][j][2] ] << endl; 
	}
      }
    }

  if(ndim == 2)  out << "TRIANGLES " << ntetR << endl;
  if(ndim == 3)  out << "TETS " << ntetR << endl; // next line is TETS nTet

  for(i = 0; i < ntetR; i++)
    {
      out << oldToNew[ tetsR[i][0] ] << " "
	  << oldToNew[ tetsR[i][1] ] << " "
	  << oldToNew[ tetsR[i][2] ];

      if(ndim == 3) out << " " << oldToNew[ tetsR[i][3] ];
	
      out << endl;
    }

  out.close();

  return;
}
